
Redis란?
----------------------------------------------------------------------------------------------
Redis는 Remote Dictionary Server의 약자로, 인메모리(in-memory) 데이터 구조 스토어입니다. 
데이터베이스, 캐시, 메시지 브로커 등으로 사용되며, 메모리에 데이터를 저장하기 때문에 매우 빠릅니다.

[Redis의 특징]
다양한 데이터 구조 지원: 
    Redis는 단순한 키-값(Key-Value) 쌍뿐만 아니라, Strings, Lists, Hashes, Sets, Sorted Sets 등 다양한 복잡한 데이터 구조를 지원합니다. 
    이를 통해 개발자는 특정 용도에 맞는 자료 구조를 활용하여 효율적으로 데이터를 처리할 수 있습니다.

지속성(Persistence): 
    데이터는 메모리에 저장되지만, **스냅샷(Snapshotting)**이나 로그 파일(AOF, Append Only File) 기능을 통해 
    디스크에 데이터를 저장하여 서버가 재시작되더라도 데이터를 복구할 수 있습니다.

고성능: 
    모든 데이터를 메모리에서 처리하기 때문에, 일반적인 디스크 기반 데이터베이스에 비해 읽기 및 쓰기 작업이 압도적으로 빠릅니다.



[Python과 Redis 연동하기]
- Python에서 Redis를 사용하려면 redis-py라는 공식 라이브러리를 설치해야 합니다.

1. redis-py 라이브러리 설치
    터미널이나 명령 프롬프트에서 다음 명령어를 실행하여 라이브러리를 설치합니다.
    Bash > pip install redis

2. Redis 서버와 연결하기
    Python 코드에서 redis.Redis 클래스를 사용하여 Redis 서버에 연결할 수 있습니다.
    <Python Code>
    import redis
    # Redis 서버에 연결
    # 호스트(host)와 포트(port)는 Redis 서버의 설정에 따라 변경될 수 있습니다.
    # db=0은 기본 데이터베이스를 의미합니다.
    r = redis.Redis(host='localhost', port=6379, db=0)
    </Python Code>


Redis 서버?
----------------------------------------------------------------------------------------------
Redis 서버는 인메모리(in-memory) 데이터 구조를 저장하고 관리하는 독립적인 프로그램입니다. 
클라이언트-서버 모델을 따르며, 클라이언트로부터 다양한 데이터 명령어(예: 데이터 저장, 조회, 삭제)를 받아 처리합니다.

[Redis 서버의 역할]
Redis 서버는 단순히 데이터를 저장하는 것을 넘어, 다음과 같은 핵심 역할을 수행합니다.

인메모리 데이터 스토어: 
    모든 데이터를 시스템 메모리(RAM)에 저장하여, 디스크 기반 데이터베이스보다 훨씬 빠른 데이터 접근 속도를 제공합니다.

다양한 데이터 구조 지원: 
    Strings, Lists, Hashes, Sets, Sorted Sets 등 여러 데이터 구조를 네이티브로 지원하여, 
    개발자가 복잡한 로직을 서버 단에서 효율적으로 처리할 수 있게 돕습니다.

지속성 관리: 
    데이터를 메모리에 보관하면서도 스냅샷(RDB) 또는 로그(AOF) 방식을 통해 디스크에 백업하여 서버가 재부팅되더라도 데이터를 복구할 수 있는 기능을 제공합니다.

데이터베이스, 캐시, 메시지 브로커: 
    고성능이 필요한 애플리케이션에서 주 데이터베이스로 사용되거나, 자주 접근하는 데이터를 캐싱하여 성능을 향상시키거나, 
    실시간 메시징 시스템의 메시지 브로커로 활용될 수 있습니다.

[Redis 서버와 클라이언트의 관계]
Redis는 서버(Server)와 클라이언트(Client)로 구성된 아키텍처를 가지고 있습니다.

Redis 서버: 
    데이터를 저장하고 명령어 처리를 담당하는 핵심 엔진입니다.

Redis 클라이언트: 
    애플리케이션(예: Python, Java, Node.js로 작성된 코드)에서 Redis 서버에 접속하여 데이터를 읽고 쓰는 역할을 합니다.

개발자는 Redis 서버를 실행하고, 애플리케이션 코드에 클라이언트 라이브러리(예: redis-py)를 사용하여 서버와 통신합니다.
이 구조를 통해 여러 애플리케이션이 동일한 Redis 서버에 접근하여 데이터를 공유하고 활용할 수 있습니다.


[Redis 클러스터]
Redis 서버는 Redis 클러스터 를 구성하여 사용할수도 있다.
예제 > https://github.com/Around-Hub-Studio/around-hub-docker/tree/Main/redis

