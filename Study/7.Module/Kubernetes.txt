
Kubernetes(줄여서 K8s)?
----------------------------------------------------------------------------------------------

Kubernetes는 컨테이너화된 애플리케이션의 배포, 확장 및 관리를 자동화하는 오픈소스 시스템입니다. 
구글이 개발한 기술로, 복잡한 컨테이너 환경을 효율적으로 운영하기 위해 설계되었습니다.


[주요 기능 및 특징]
자동화된 배포 및 롤백: 
    새로운 버전의 애플리케이션을 자동으로 배포하고, 문제가 발생하면 이전 버전으로 되돌릴 수 있습니다.

서비스 디스커버리 및 로드 밸런싱: 
    컨테이너가 어디에서 실행되든 자동으로 찾고, 네트워크 트래픽을 여러 컨테이너에 분산시켜줍니다.

스토리지 오케스트레이션: 
    컨테이너가 필요로 하는 스토리지를 자동으로 마운트할 수 있습니다.

자체 복구 기능: 
    컨테이너가 실패하거나 다운되면, 자동으로 재시작하거나 교체하여 서비스 연속성을 보장합니다.

수평적 확장(Horizontal Scaling): 
    애플리케이션의 트래픽이 증가하면 컨테이너 인스턴스를 자동으로 늘려주고, 트래픽이 감소하면 줄여줍니다.

구성 관리: 
    환경 변수나 비밀번호 같은 애플리케이션 설정을 컨테이너 이미지와 분리하여 관리할 수 있습니다.


[Docker와 Kubernetes의 관계]
Docker는 개별 컨테이너를 만들고 실행하는 기술이라면, Kubernetes는 이러한 컨테이너들을 대규모로 관리하고 오케스트레이션하는 시스템입니다.
컨테이너들이 하나의 컴퓨터에만 있는 것이 아니라 여러 컴퓨터(노드)에 분산되어 있을 때,
이들을 효율적으로 관리하고 서로 통신하게 만드는 역할을 Kubernetes가 담당합니다. 
마치 Docker가 배송 상자(컨테이너)를 만드는 도구라면, Kubernetes는 수많은 상자들을 체계적으로 분류하고 운송하는 물류 시스템과 같습니다.



POD 란?
----------------------------------------------------------------------------------------------
POD는 Kubernetes에서 생성하고 관리할 수 있는 가장 작은 배포 단위입니다. 
POD는 하나 이상의 컨테이너(주로 Docker 컨테이너) 그룹과, 해당 컨테이너들이 공유하는 스토리지 및 네트워크 리소스로 구성됩니다.

[POD의 핵심 개념]
POD는 단일 애플리케이션의 단일 인스턴스를 나타냅니다. 
POD 내의 컨테이너들은 항상 함께 배치되고, 함께 스케줄링되며, 동일한 물리적 또는 가상 머신에서 실행됩니다.

공유 리소스: 
    POD 내의 모든 컨테이너들은 로컬 호스트 IP 주소와 포트 공간, 그리고 공유 볼륨을 공유합니다. 
    이를 통해 POD 내의 컨테이너들은 localhost를 통해 쉽게 통신할 수 있습니다.

생명 주기: 
    POD는 자체적인 생명 주기를 가집니다. POD가 죽으면, Kubernetes는 동일한 POD를 재생성하지 않고 새로운 POD를 만들어 교체합니다.

[POD와 컨테이너의 관계]
    POD는 컨테이너를 직접 실행하는 대신, 컨테이너를 담는 논리적인 래퍼(Wrapper) 역할을 합니다. 
    단일 컨테이너 애플리케이션의 경우에도, Kubernetes는 해당 컨테이너를 POD 내부에 배치합니다.

    POD 내에 여러 컨테이너를 함께 배치하는 일반적인 시나리오로는 다음과 같은 경우가 있습니다.
    1. 사이드카 패턴(Sidecar Pattern): 
        주 애플리케이션 컨테이너의 기능을 보조하는 컨테이너를 함께 배치합니다. 
        예를 들어, 웹 서버 컨테이너와 로그 수집기 컨테이너를 같은 POD에 두는 경우입니다.
    2. 앰배서더 패턴(Ambassador Pattern): 
        외부 서비스와의 통신을 처리하는 프록시 컨테이너를 두어, 주 애플리케이션이 외부 통신에 신경 쓰지 않도록 합니다.

왜 POD를 사용할까?
 - POD는 컨테이너를 직접 다루는 것보다 복잡한 애플리케이션을 관리하고, 효율적으로 통신하며, 장애를 자동으로 복구하는 데 훨씬 유리하기 때문입니다. 
   Kubernetes는 이러한 POD들을 관리하는 데 최적화되어 있습니다.

