
Docker 란 
 - 컨테이너 관리에 필요한 일반적인 기능을 모두 제공하는 GUI 도구, 오픈소스 가상화 플랫폼
 - Window/Mac OS 에서 Linux 환경의 App 가동을 위한 기술
 - URL
    - https://www.youtube.com/watch?v=IqnAiM1A0d8 << 보는중 (1:18분)
    

Docker 설치
 - https://docs.docker.com/get-started/get-docker/
 - Docker Compose는 여러 개의 Docker 컨테이너를 함께 정의하고 실행하기 위한 도구
 - 복잡한 Docker 환경 설정을 파일 하나로 관리하고, 명령어 한 번으로 쉽게 실행할 수 있게 해주는 도구
 - 웹 서버(Nginx), 데이터베이스(MySQL), 백엔드(Python), Redis 등 여러 개의 컨테이너로 구성된 서비스를 YAML 파일 하나에 정의


 Docker Desktop 설치
 - Docker Desktop는 컨테이너 관리에 필요한 일반적인 기능을 모두 제공하는 GUI 도구


 Docker Window 버전 설치 주의
 - 줄바꿈 코드 '\r\n' 사용안하고 '\n' 사용함. 
 - VSCode > Settings > Files > Eol 설정을 (\n)Unix 형식으로 변경
 - Git > git config --global core.autocrlf false 설정을 추가
 - Docker는 WSL2 가상머신에도 동작하므로 메모리를 여유있게 잡아야 한다. 
 

Docker window desktop 버전에서 가상 메모리를 설정하려면?
    1. 모든 WSL 인스턴스 종료: 
        PowerShell 또는 CMD에서 wsl --shutdown 명령어를 실행하여 현재 실행 중인 모든 WSL 인스턴스를 종료합니다.
    2. .wslconfig 파일 생성/편집:
        %UserProfile% 경로에 있는 .wslconfig 파일을 메모장이나 다른 텍스트 편집기로 엽니다. (예: C:\Users\사용자이름\.wslconfig). 만약 파일이 없다면 새로 생성합니다.
    3. 설정 추가: 
        파일에 다음 내용을 추가하여 가상 메모리 크기를 설정합니다.

        [wsl2]
        # WSL 2 VM이 사용할 최대 메모리 크기를 4GB로 제한
        memory=4GB

        # WSL 2 VM이 사용할 최대 스왑 메모리 크기를 2GB로 설정
        swap=2GB

    4. 저장 및 재시작: 
        파일을 저장하고, Docker Desktop을 다시 실행합니다. 이렇게 하면 새로운 리소스 설정이 적용됩니다
    
    5. Update
        powershell > wsl --update
        만약 업데이트 진행중 패키지를 등록할 수 없습니다. 라고 나오면
        방화벽 및 백신 일시 중지
            a. 시작 메뉴 > 설정 > 업데이트 및 보안 > Windows 보안
            b. **'바이러스 및 위협 방지'**를 클릭
            c. '바이러스 및 위협 방지 설정' 아래의 **'설정 관리'**를 클릭
            d. 실시간 보호' 스위치를 **'끔'**으로 전환


Docker 사용해 보기
 - Docker Hub에서 Docker 이미지를 다운로드 받아 Container 실행하는 예제
    - Docker Hub URL: https://hub.docker.com/
    - 원하는 image를 검색하여 다운로드 명령 확인.
    - docker widnow > termial > docker pull tomcat 
    - docker window > image에서 tomcat 실행
        
 - 용어 정리
    Docker Hub(도커 허브): Docker 이미지 저장소
    Docker Image(도커 이미지): 애플리케이션 실행에 필요한 모든 것(애플리케이션 구성 파일, 라이브러리, 설정 정보 등)을 포함한 소프트웨어 패키지입니다.
    Docker Container(도커 컨테이너): Docker 이미지를 기반으로 실행되는 독립적인 애플리케이션 환경입니다.


Docker 커맨드
 - container, image, volume, network... 등의 커맨드 대상이 있다.
 - docker [대상:container] --help 
 ex> 
    > docker run --name <container_name> -p <host_port>:<container_port> <image_name>
    > docker run --name tomcatInst_01 -p 8080:8080 tomcat   # 이미지를 기반으로 tomcat 컨테이너 실행
    > docker run --name httpdInst_01 -d p 8080:8080 httpd   # 이미지를 기반으로 아파치  컨테이너 실행 (-d: 백그라운드)
    > docker contatiner ls -a                               # 컨테이너 상태 확인 (신규)
    > docker ps -a                                          # 컨테이너 상태 확인 (과거)
    > docker image ls                                       # 이미지 목록 확인
    > docker stop tomcatInst_01                             # 컨테이너 중지 (실행 중인 컨테이너만 중지 가능:Status(Up) 이면 중지)
    > docker rm tomcatInst_01                               # 컨테이너 삭제    
    > docker inspect <container_name> or <image_name>       # 컨테이너 상세 정보 확인 (Layers 등 확인가능)


Dockerfile 작성
 - Docker Image를 작성하기 위한 스크립트
 - 주요 키워드 : Instractio 
    - FROM : Base가 되는 Image를 지정, 주로 OS 이미지나 Runtime 이미지를 지정함. (OS: JavaRuntime, PythonRuntime, Nginx, Tomcat, httpd 등)
    - RUN  : 이미지를 빌드할 때 사용하는 커맨드를 설정할때 사용
    - ADD  : 이미지에 호스트의 파일이나 폴더를 추가하기 위해 사용
    - COPY : 호스트 환경의 파일/폴더를 이미지 안에 복사
             'ADD'와 비슷하나, URL를 지정하거나, 압축파일을 자동으로 풀지 않는 차이점이 있음.    
    - EXPOSE : 컨테이너 실행시 접근 가능한 포트 설정
    - ENV  : 환경 변수 지정, $name, ${name}, ${name:-else}:name 방식으로 사용    
    - ENTRYPOINT : 이미지가 실행 될때 사용되는 명령어 설정(베이스 기본 명령)
    - CMD  : 컨테이너 실행시 실행할 명령어 설정, RUN은 이미지를 빌드할때 사용하며, CMD는 컨테이너를 시작할때 실행된다.
    - WORKDIR : 컨테이너 실행시 실행할 디렉토리 지정
    - VOLUME : 퍼시스턴스 데이터를 저장할 경로 지정, 호스트 디렉토리를 도커 컨테이너에 연결 (비휘발성 데이더 저장)
               - 컨테이너 제거시 데이터가 날아가는데 비해, DB등 유지하고 싶을 경우 사용.
    - docker build 명령 
        - 도커 이미지 생성
          > docker build ${option} ${dockerfile directory path}
          > docker build -t <image_name>
 

Dockerfile 를 통한 Image 빌드 생성 
 - Docker file을 바탕으로 Build 하여 Image를 생성해준다.
 ex> 폴더에 Dockerfile과 index.html 파일이 있다고 가정하고 실행한다.
    > Dockerfile 내용
        FROM httpd
        COPY index.html /usr/local/apache2/htdocs/
    > index.html 내용
        <html><body>Hello Docker</body></html>
    > docker build -t testimage .                           # 현재 위치에서 testimage 이미지 생성   
    > docker build -t testimage:v1.0 .                      # 현재 위치에서 testimage 이미지 생성 & 버전 Tag 지정 
    > docker image ls                                       # 이미지 목록 확인
    > docker run --name testInst -p 8080:8080 testimage     # 이미지를 기반으로 실행 (아파치 + html) 


Docker-Compose 작성하기
 - Docker app, service, network, volume 등을 yaml 형식으로 작성한 통합관리 파일
 - 인프라 환경을 구축할때, 자주 사용된다.
 - 구성요소
    - version:              # deprecated 되어 생략해도 무방
    - services:
        frontend:               # 컨테이너 이름
            image:              # 이미지 이름
            build:              # dockerfile을 통해 빌드해서 image 구성
            dockerfile:         # 빌드할 이름이 'dockerfile'이 아닐때 이름 지정
            ports: 8080:8080    # 호스트와 컨테이너의 포트 바인딩에 사용
            volumes:            # 호스트이 지정된 경로로 컨테이너의 볼륨을 마운트 하도록 설정
            container_name:     # 컨테이너 이름 지정
            command:            # 컨테이너 실행된 후 컨테이너의 쉘에서 실행할 명령어
            environment:        # 컨테이너에서 실행할 명령어에 사용할 환경변수 지정
            env_file:           # 'environment'같은 기능이며, 파일로 환경변수 지정
            depends_on:         # 컨테이너 실행 전에 지정한 컨테이너를 먼저 실행하고 실행할 컨테이너 의존관계 설정
            networks:           # 컨테이너의 네트워크 설정
            restart:            # 컨테이너 재시작 관련 설정
        ex>
    - networks
    - volumes
    - secrets
    - configs
 - Docker-Compose 파일 실행
    - docker-compose up                                 # 기본적으로 'docker-compose.yaml' 파일 실행
    - docker-compose -f <compose_file_name> up -d       # 지정한 파일 실행 (-f:파일이름 지정, -d:백그라운드로 실행)
                                                        # 이미 컨테이너가 있을 경우 Stop에서 Start로 실행됨     

Docker 이미지 생성 및 저장하기
 - 매번 같은 설정으로 사용하고 있을때, 이미지를 생성하여 편하게 사용할 수 있다.
 - 본인이 개발한 애플리케이션을 이미지로 생성하여 배포할수 있다.
 - 방법 1>
    - 기존 이미지 + 추가설정이 포함된 레이어 > 변경이 반영된 이미지로 생성
    - docker commit <container_name> <image_name>
    - docker commit testContainer MyImage
 - 방법 2>
    - Dockerfile 작성 (위에서 설명됨) > 이미지 생성
    - docker build <option> <dockerfile directory path>
    - docker build -t <image_name> .

Docker 이미지 파일로 저장
 - 생성된 이미지를 파일로 저장. 
 - save/load 명령어를 사용하면 이미지를 파일로 저장할 수 있다.
   : 방법 1>
    # 도커이미지를 tar 파일로 추출하기
    - docker save -o <image_file_name [testimage.tar]> <image_name [testContainer:latest]>
    # 추출된 tar파일을 이미지로 불러오기 
    - docker load -i <image_file_name [testimage.tar]> 
 - export/import 명령어를 사용하면 이미지를 파일로 저장할 수 있다.
   : 방법 2>
    - docker export <image_name> > <image_file_name>









