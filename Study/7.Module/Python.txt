Python 관련 모듈


FastAPI?
----------------------------------------------------------------------------------------------
FastAPI는 파이썬으로 API를 구축하는 데 사용되는 현대적이고 빠르며, 고성능의 웹 프레임워크입니다. 
파이썬 3.7+ 버전의 표준 타입 힌트(type hints)를 기반으로 하여 API 문서화, 데이터 유효성 검사, 직렬화 등을 자동으로 처리해주는 것이 가장 큰 특징입니다.

[주요 특징]
뛰어난 성능: Starlette(라우팅)과 Pydantic(데이터 유효성 검사)을 기반으로 하며, 
ASGI(Asynchronous Server Gateway Interface)를 지원해 높은 성능을 자랑합니다.

쉬운 개발: 
    파이썬 타입 힌트를 사용해 코드가 명확하고 자동 완성 기능이 잘 작동합니다.
자동 문서화: 
    OpenAPI(이전의 Swagger)와 JSON 스키마를 기반으로, 
    개발자가 별도의 작업을 하지 않아도 인터랙티브한 API 문서(Swagger UI, ReDoc)를 자동으로 생성합니다.
데이터 유효성 검사: 
    Pydantic 모델을 사용해 요청 데이터를 검증하고, 잘못된 데이터가 들어오면 자동으로 오류를 반환합니다.
간편한 배포: 
    Uvicorn과 같은 ASGI 서버를 사용해 쉽게 실행하고 배포할 수 있습니다.

왜 FastAPI를 사용할까?
FastAPI는 주로 백엔드 API 서버나 마이크로서비스를 구축하는 데 사용됩니다. 
특히 고성능과 빠른 개발 속도가 중요한 프로젝트에 적합합니다. 
Flask와 같은 다른 프레임워크와 달리, FastAPI는 API 개발에 필요한 많은 기능을 내장하고 있어,
별도의 라이브러리 없이도 안정적인 코드를 빠르게 작성할 수 있습니다.



Flask?
----------------------------------------------------------------------------------------------




Venv?
----------------------------------------------------------------------------------------------
venv는 파이썬에서 **가상 환경(virtual environment)**을 생성하는 데 사용되는 내장 모듈입니다. 
가상 환경은 특정 파이썬 프로젝트를 위한 독립적인 공간을 만들어, 프로젝트별로 필요한 라이브러리와 파이썬 버전을 관리할 수 있게 해줍니다.

[venv를 사용하는 이유]
파이썬 프로젝트를 개발하다 보면, 각 프로젝트가 서로 다른 버전의 라이브러리를 요구하거나 특정 라이브러리와 충돌하는 경우가 발생할 수 있습니다. 
예를 들어, 한 프로젝트는 Django 2.x를 사용하고 다른 프로젝트는 Django 4.x를 사용해야 할 때, 이들을 시스템 전체에 설치하면 버전 충돌이 발생할 수 있습니다.
venv는 이러한 문제를 해결하기 위해 각 프로젝트가 독립적인 환경을 갖도록 해줍니다.

프로젝트 격리: 
    각 프로젝트는 자신만의 site-packages 디렉터리를 가지므로, 한 프로젝트에 설치된 라이브러리가 다른 프로젝트에 영향을 주지 않습니다.
환경 일관성: 
    프로젝트에 필요한 패키지 목록을 requirements.txt 파일로 관리하여, 다른 개발자가 동일한 환경을 쉽게 재현할 수 있습니다.
시스템 오염 방지: 
    시스템 전역에 불필요한 패키지를 설치하는 것을 막아, 파이썬 환경을 깨끗하게 유지할 수 있습니다.
하나의 가상환경을 만들어 프로젝트를 관리한다라고 생각하면 된다.



Pydantic?
----------------------------------------------------------------------------------------------
Pydantic은 데이터 유효성 검사 및 설정 관리를 위한 파이썬 라이브러리입니다. 
파이썬의 타입 힌트(Type Hints)를 사용하여 데이터를 검증하고, 자동으로 직렬화 및 역직렬화(Serialization/Deserialization)를 해줍니다.

[주요 특징]
타입 기반 유효성 검사: 
    파이썬의 표준 타입 힌트를 활용하여 런타임에 데이터가 올바른 타입인지 자동으로 검사합니다.
자동 직렬화/역직렬화: 
    파이썬 객체를 JSON과 같은 형태로 변환(직렬화)하거나, JSON을 파이썬 객체로 변환(역직렬화)하는 작업을 자동으로 처리합니다.
쉬운 설정 관리: 
    환경 변수를 사용하여 애플리케이션 설정을 쉽게 관리할 수 있습니다.
뛰어난 성능: 
    내부적으로 Rust 기반의 pydantic-core를 사용하여 매우 빠른 성능을 제공합니다.
오류 보고: 
    유효성 검사에 실패하면, 어떤 필드에서 어떤 오류가 발생했는지 명확한 오류 메시지를 제공합니다.

[Pydantic의 역할]
Pydantic은 주로 다음과 같은 용도로 사용됩니다.

웹 API의 데이터 검증: 
    FastAPI와 같은 웹 프레임워크에서 요청(Request)으로 들어오는 데이터의 유효성을 검사합니다. 
    예를 들어, 사용자 이름이 문자열이고, 이메일 형식이 올바른지 등을 자동으로 확인합니다.
데이터 클래스 생성: 
    복잡한 데이터 구조를 명확하게 정의하는 모델 클래스를 만듭니다.