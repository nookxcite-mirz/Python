
Git Bash 명령:

# git log 사용법 
git log 
git log --oneline       # 요약으로 출력
git log --oneline -10   # 요약으로 최근 10개만 출력


# [UnStage] 수정된 파일 + 새로 추가된 파일 모두를 changed_files.tar로 Export 해준다. (window)
(git diff --name-only -z; git ls-files -z --others --exclude-standard) | xargs -0 tar -cf changed_unstagefiles.tar

# [Stage] 변경된 스테이지된 파일을 tar 파일로 Export 해준다.
git diff --staged --name-only -z | xargs -0 tar -cf changed_stagedfiles.tar

# 스테이지된 파일, 언스테이지된 수정 파일, 추적하지 않는 새 파일 목록을 모두 합칩니다.
(git diff --staged --name-only -z; git diff --name-only -z; git ls-files -z --others --exclude-standard) | xargs -0 tar -cf all_changes.tar


# 스크립트 권한 부여
chmod +x commit_split.sh


# 커밋 취소
git reset --soft HEAD~1
git reset --soft <commit_id>


# 스테이지에서 모두 내려서 언스테이지로 옮김
git restore --staged .
git restore --staged <file_name>


# 언스테이지에서 스테이지로 옮김
git add .
git add <file_name>


# 커밋 내용 원격 저장소에 push
git push origin master
git push origin a1b2c3d:main        # 지정한 commit_id 까지만 Push 한다.


# 커밋 내용 원격 저장소에 pull
git pull origin master


# Branch 에서 다른 Branch로 Merge
git switch <branch_name:main>     # 'main' 브런치로 이동
git merge <branch_name:work>      # 'work' 브랜치의 내용을 현재 브랜치(main)로 가져와 합칩니다.


# 수정 및 추가된 파일 갯수 확인
 - 커밋 안 된 모든 변경 파일 개수 (폴더 안의 파일은 포함 안됨)
    > git status --porcelain | wc -l
- 커밋 안 된 모든 변경 파일 개수 (폴더 안의 파일 포함)
    > (git diff --name-only; git ls-files --others --exclude-standard) | wc -l
 - 수정된 파일 (Modified) 개수
    > git status --porcelain | grep "^??" | wc -l
 - 스테이지에 올라간 파일 개수      
    > git diff --staged --name-only | wc -l


