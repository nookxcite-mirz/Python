

로컬영역과 Docker영역은 서로 다르다.
로컬영역에서 개발 및 테스트를 위해서는 로컬영역에 venv등으로 가상 모듈 환경을 구축하며,
Docker는 Docker툴에 구성할 개발 환경을 구축하여 테스트 할수 있다. 추후 Docker로 만들어진 image를 사용자들이 공통으로 사용가능


[설치]
bash> pip install "FastAPI"
bash> pip install "uvicorn[standard]"       # ASGI 서버에 필요 (uviron or hypercorn 사용)


[주의] 
 1. 터미널로 powershell을 사용중이면 보안이슈로, about_Execution_Policies 발생함.    
    해결1> PowerShell에 권한 허용
        - Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser        
    해결2> Git Bash 로 기본 터미널 변경 (권장장)
        - "Ctrl+Shift+P" Terminal:Select Default Profile > Command Prompt 를 Git Bash 로 변경
 
 2. install 설치하다가 버전이슈로 실패시
    - Bash> pip install --upgrade pip               # pip 패키지 업그레이드


[개발 환경 구성] https://fastapi.tiangolo.com/ko/
>LeeSam 폴더
----------------------------------------------------------------------------------------------
bash> python -m venv venv01                             # 가상환경 생성
base> venv01/Scripts/activate                           # 가상환경 활성화
venv01> pip install "fastapi" "uvicorn[standard]"       # 가상환경에 패키지 설치..
venv01> touch main.py                                   # main.py 파일 생성
venv01> deactivate                                      # 가상환경 비활성화.


# Uvicorn이라는 ASGI 웹 서버를 사용하여 main.py 파일 내의 app 객체를 실행하고, 코드 변경 시 서버를 자동으로 재시작하는 명령
bash> uvicorn main:app --reload   # 서버 실행
bash> "Ctrl + C"                  # 터미널 실행 종료, 서버 중지

[프로세스 ID(PID)로 종료]
 - 서버가 백그라운드에서 실행 중이거나, 터미널을 닫았는데도 프로세스가 남아 있는 경우에 사용합니다.

 - PID 찾기: 서버가 실행 중인 포트나 프로세스 이름을 이용해 PID를 찾습니다.
    Windows:        netstat -ano | findstr "8000" <포트 번호>
    macOS/Linux:    lsof -i :<포트 번호> 또는 ps -ef | grep <프로세스 이름>

- 프로세스 종료: 찾은 PID를 이용해 프로세스를 종료합니다.
    Windows:        taskkill /F /PID <PID>
    macOS/Linux:    kill <PID> (정상 종료) 또는 kill -9 <PID> (강제 종료)

- netstat 으로 검색했을 때 나오는 PID는 **서버를 실행하는 실제 프로세스(하위 프로세스)**입니다. 
  이 하위 프로세스가 종료되면 부모 프로세스는 자동으로 새로운 하위 프로세스를 시작하려고 시도합니다. 
  따라서 taskkill로 하위 프로세스를 죽여도, 부모 프로세스가 다시 서버를 띄우기 때문에 프로세스가 살아있는 것처럼 보이는 것입니다.
  powershell> "Get-Process -Name uvicorn" 를 통해 프로세스 이름을 찾아서 종료할 수 있다.


[서버 접속]
# 1. 웹 브라우저에서 http://localhost:8000/ 접속
# 2. 웹 브라우저에서 http://localhost:8000/items/5?q=test 접속

[FastAPI 는 자동으로 Swagger UI 를 제공]
# 1. 웹 브라우저에서 http://localhost:8000/docs 접속
# 2. 웹 브라우저에서 http://localhost:8000/redoc 접속


[패키지가 설치된지 확인] grep 명령 사용
bash> source venv01/Scripts/activate
venv> pip freeze | grep <package_name>
venv> pip freeze | grep pydantic
        pydantic==2.11.7
        pydantic_core==2.33.2


[가상 환경 재구축]
# 1. venv01 환경 활성화
    bash> source venv01\Scripts\activate

# 2. 패키지 목록 저장
    venv> pip freeze > requirements.txt

# 3. venv01 환경 비활성화 후 삭제
    venv> deactivate
    bash> rmdir /s venv01

# 4. 새로운 venv02 환경 생성 및 활성화
    bash> python -m venv venv02
    bash> source venv02\Scripts\activate

# 5. 패키지 설치
    venv> pip install -r requirements.txt


