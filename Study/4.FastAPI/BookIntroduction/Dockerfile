
# ===========================================
# Dockerfile - FastAPI 애플리케이션 컨테이너 이미지
# ===========================================
# 이 Dockerfile은 FastAPI 애플리케이션을 Docker 컨테이너로 패키징합니다.
# Poetry를 사용하여 의존성을 관리하고, 최적화된 Python 3.12 환경을 구성합니다.
#
# 빌드 명령어:
#   docker build -t bookintro-app .
#   docker run -p 8000:8000 bookintro-app
#
# Docker Compose 사용:
#   docker compose up --build

# ===========================================
# 베이스 이미지 설정
# ===========================================
# Python 3.12-slim 이미지 사용
# - slim: 최소한의 패키지만 포함된 경량 이미지
# - 보안 패치가 적용된 최신 버전 사용
# - Alpine Linux 기반으로 크기가 작음
FROM python:3.12-slim

# ===========================================
# 환경 변수 설정
# ===========================================
# Python 출력을 즉시 표시 (Docker 로그에서 실시간 확인 가능)
# 버퍼링을 비활성화하여 로그가 즉시 출력되도록 함
ENV PYTHONUNBUFFERED=1

# Python이 .pyc 파일을 생성하지 않도록 설정
# 컨테이너에서는 컴파일된 바이트코드가 불필요하므로 디스크 공간 절약
ENV PYTHONDONTWRITEBYTECODE=1

# ===========================================
# 작업 디렉토리 설정
# ===========================================
# 컨테이너 내에서 애플리케이션이 실행될 디렉토리
# 모든 후속 명령어는 이 디렉토리에서 실행됨
WORKDIR /src

# ===========================================
# 시스템 패키지 설치
# ===========================================
# apt-get을 사용하여 필요한 시스템 패키지 설치
# curl: Poetry 설치 시 필요 (공식 설치 스크립트 다운로드용)
# && rm -rf /var/lib/apt/lists/*: 패키지 캐시 삭제로 이미지 크기 최적화
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# ===========================================
# Python 패키지 매니저 설치
# ===========================================
# pip 업그레이드 후 Poetry 설치
# Poetry: Python 의존성 관리 도구 (pip + virtualenv + packaging의 통합)
# --upgrade pip: 최신 pip 버전으로 업그레이드
RUN pip install --upgrade pip && \
    pip install poetry

# ===========================================
# Poetry 설정
# ===========================================
# Poetry가 가상환경을 생성하지 않도록 설정
# 컨테이너 자체가 격리된 환경이므로 별도 가상환경 불필요
RUN poetry config virtualenvs.create false

# ===========================================
# 의존성 파일 복사 및 설치
# ===========================================
# 의존성 정의 파일들을 먼저 복사 (Docker 레이어 캐싱 최적화)
# pyproject.toml: Poetry 프로젝트 설정 및 의존성 정의
# poetry.lock*: 정확한 버전 고정 파일 (있으면 복사, 없어도 에러 없음)
COPY pyproject.toml poetry.lock* ./

# Poetry를 사용하여 의존성 설치
# --only=main: 프로덕션 의존성만 설치 (개발용 의존성 제외)
# --no-root: 현재 프로젝트를 패키지로 설치하지 않음
RUN poetry install --only=main --no-root

# ===========================================
# 애플리케이션 소스 코드 복사
# ===========================================
# 의존성 설치 후 소스 코드 복사 (캐시 최적화)
# . : 현재 디렉토리의 모든 파일을 컨테이너의 /src에 복사
COPY . .

# ===========================================
# 포트 노출
# ===========================================
# 컨테이너가 내부적으로 사용할 포트를 명시적으로 선언
# 다른 개발자나 시스템 관리자에게 "이 컨테이너는 8000번 포트를 사용한다"고 알려주는 역할
# 실제 포트 바인딩은 docker run -p 또는 docker-compose에서 설정
EXPOSE 8000

# ===========================================
# 애플리케이션 실행 명령
# ===========================================
# 컨테이너 시작 시 실행될 명령어
# uvicorn: ASGI 서버 (FastAPI의 공식 서버)
# api.main:app: api/main.py 파일의 app 객체를 실행
# --host 0.0.0.0: 모든 네트워크 인터페이스에서 접근 가능
# --port 8000: 8000번 포트에서 서비스 실행
# --reload: 개발 모드 (파일 변경 시 자동 재시작)
# 볼륨 마운트와 함께 사용하여 개발 중 실시간 코드 반영
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]





