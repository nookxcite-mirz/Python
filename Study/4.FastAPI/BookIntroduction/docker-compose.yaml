# ===========================================
# Docker Compose 설정 파일
# ===========================================
# 이 파일은 FastAPI 애플리케이션을 Docker 컨테이너로 실행하기 위한 설정입니다.
# Docker Compose는 여러 컨테이너를 하나의 서비스로 관리할 수 있게 해줍니다.

# 프로젝트명 설정 (이미지명에 사용됨)
name: bookintro
# 
# 사용법:
#   docker compose up --build    # 이미지 빌드 후 컨테이너 실행
#   docker compose up -d         # 백그라운드에서 실행
#   docker compose down          # 컨테이너 중지 및 제거
#   docker compose logs          # 로그 확인
#
# 주의사항:
#   - YAML 파일은 2칸 들여쓰기를 사용합니다
#   - 들여쓰기와 공백에 주의해야 합니다

# ===========================================
# 서비스 정의
# ===========================================
services:
  # 서비스 이름: service-app
  # 이 이름으로 컨테이너가 생성됩니다
  service-app:
    # ===========================================
    # 빌드 설정
    # ===========================================
    build:
      # 빌드 컨텍스트: 현재 디렉토리 (.)
      # Dockerfile과 소스 코드가 있는 위치
      context: .
      # 사용할 Dockerfile 이름 (기본값: Dockerfile)
      dockerfile: Dockerfile
      # 이미지 태그 설정 (소문자와 하이픈만 사용)
      # tags를 지정하지 않으면 자동으로 {프로젝트명}-{서비스명}:latest 생성
    
    # ===========================================
    # 포트 매핑
    # ===========================================
    ports:
      # "호스트포트:컨테이너포트" 형식
      # 호스트의 8000번 포트를 컨테이너의 8000번 포트로 연결
      # 브라우저에서 http://localhost:8000 으로 접속 가능 (호스트 8000번 → 컨테이너 8000번))
      - "8000:8000"
    
    # ===========================================
    # 환경 변수 설정
    # ===========================================
    environment:
      # Python 출력을 즉시 표시 (Docker 로그에서 실시간 확인 가능)
      - PYTHONUNBUFFERED=1
      # 파일 변경 감지를 위한 폴링 설정 (Windows/Mac에서 필요)
      - WATCHFILES_FORCE_POLLING=true
    
    # ===========================================
    # 볼륨 마운트 (개발용 - 활성화됨)
    # ===========================================
    # 개발 시에만 사용: 로컬 코드 변경사항을 컨테이너에 실시간 반영
    # 프로덕션에서는 소스 코드가 이미지에 포함되므로 불필요
    volumes:
      # "호스트경로:컨테이너경로" 형식
      # 현재 디렉토리를 컨테이너의 /src에 마운트
      - .:/src
    
    # ===========================================
    # 추가 설정 옵션들 (필요시 주석 해제)
    # ===========================================
    
    # 컨테이너 이름 지정
    container_name: bookintro-container
    
    # 재시작 정책 (컨테이너가 종료되면 자동 재시작)
    # restart: unless-stopped
    
    # 네트워크 설정
    # networks:
    #   - app-network
    
    # 의존성 설정 (다른 서비스가 먼저 실행되어야 할 때)
    # depends_on:
    #   - database
    #   - redis
      