

[# Cursor AI Editor]
----------------------------------------------------------------------------------------------
# Cursor AI Skin 변경
 - Cursor AI는 VS Code를 기반으로 만들어졌기 때문에, VS Code의 테마 변경 방식을 그대로 따릅니다. 
   애플리케이션의 색상 테마는 명령어 팔레트:theme Color > 원하는 시킨 선택 (Dark:VisualStudio 권장)
   View > Command Palette > theme Color > Dark(Visual studio) 사용.

# Cursor AI Default Terminal 변경
 - 명령어 팔레트: Terminal:Select Default Profile > 원하는 터미널 선택
   View > Command Palette > Terminal:Select Default Profile > Git Bash



[# Cursor AI 요청 방법]
----------------------------------------------------------------------------------------------
## 1. Ask (질문하기)
 - **Ctrl+L**: 채팅 창을 열어서 AI에게 질문하거나 코드에 대한 설명을 요청
 - 코드 블록을 선택하고 Ctrl+L을 누르면 해당 코드에 대한 설명이나 개선사항을 요청 가능
 - 일반적인 프로그래밍 질문, 디버깅 도움, 코드 리뷰 등에 활용

## 2. Agent (에이전트)
 - **Ctrl+Shift+L**: 에이전트 모드로 전환하여 더 복잡한 작업 수행
 - 파일 생성, 수정, 삭제 등 실제 파일 시스템 작업을 AI가 직접 수행
 - 프로젝트 구조 변경, 여러 파일에 걸친 리팩토링 등에 활용
 - AI가 단계별로 작업을 진행하며 사용자의 승인을 받아 실행

## 3. Background (백그라운드)
 - **Ctrl+I**: 인라인 편집 모드로 현재 커서 위치에서 코드 수정 제안
 - 선택한 코드나 커서 위치를 기준으로 AI가 코드 개선안을 제안
 - 실시간으로 코드를 수정하거나 추가할 때 사용
 - 빠른 코드 수정이나 간단한 기능 추가에 적합

## 4. Ctrl+K (선택 영역)
 - **Ctrl+K**: 코드의 특정 영역(지역)에 대해 변경할 사항이나 개선점을 AI에게 제안받을 수 있습니다.
 - 코드 블록을 선택한 후 Ctrl+K를 누르면, 해당 부분에 대한 리팩토링, 최적화, 버그 수정 등 구체적인 개선 제안을 받을 수 있습니다.
 - 여러 줄을 선택하거나 함수, 클래스 등 특정 범위를 지정하여, 해당 영역에 집중된 AI의 피드백을 받을 때 유용합니다.

## 5. 적용 & 취소
 - **Ctrl+Enter**: AI가 제안한 변경 사항을 실제 코드에 적용합니다. 여러 제안 중 원하는 것을 선택하여 적용할 수도 있습니다.
 - **Esc**       : AI가 제안한 변경 내용을 거절하거나, 적용하지 않고 원래 코드로 되돌릴 수 있습니다.
 - 변경 적용/취소는 작업의 안전성을 높여주며, 실수로 인한 코드 손상을 방지할 수 있습니다.


## Cursor AI Normal/Max 모드
 - Normal 모드:
    - '핵심 요약본'만 보고 빠르게 문제를 파악하는 것과 같습니다.
    - GPT-4o, Claude 3.5 Sonnet 등 고성능 모델을 훨씬 여유롭게 사용할 수 있습니다. (약 500회의 "빠른" 요청 후 "느린" 요청으로 전환)
 - Max 모드:
    - '프로젝트 전체 설계도'를 처음부터 끝까지 꼼꼼하게 다 읽고 문제를 분석하는 것과 같습니다
    - 채팅창에서 @codebase 심볼을 사용하여 질문하면 Cursor가 프로젝트 전체를 컨텍스트로 삼아 분석을 시작합니다. 
    - [Pro 플랜]의 핵심적인 장점으로, 추가 과금 없이 사용할 수 있습니다.
    - Max 모드는 Normal 모드보다 훨씬 많은 사용량을 소모하므로, 남용 시 공정 사용 정책에 따라 일시적인 속도 저하를 겪을 수 있습니다.



[# Cursor AI 문맥 @ 사용]
----------------------------------------------------------------------------------------------
Cursor AI에서 @ 심볼은 AI에게 정확한 문맥(Context)을 지정해주는 가장 강력하고 중요한 기능입니다. 
단순히 현재 열린 파일만 보는 것을 넘어, 필요한 파일, 폴더, 문서, 터미널 출력 등 원하는 정보를 AI의 작업대에 올려주는 역할을 합니다.

채팅(Ctrl+L 또는 Cmd+L) 창에서 이 기능들을 적극적으로 활용해 보세요.
1. @file: 특정 파일 참조하기
    - 예> @utils/api.js 파일의 fetchData 함수를 async/await를 사용하도록 리팩토링해줘.
2. @dir 또는 @folder: 특정 폴더(디렉토리) 참조하기
    - 예> @hooks 폴더 안에 있는 모든 커스텀 hook들의 네이밍 컨벤션을 use[Name] 형식으로 통일해줘.
3. @codebase: 프로젝트 전체 참조하기
    - 예> @codebase 이 프로젝트에서 사용자 인증은 어떤 방식으로 처리되고 있어? 관련된 파일들을 모두 알려줘.
4. @doc: 공식 문서 및 라이브러리 참조하기
    - 예> @doc(react) React 19의 새로운 hook인 useOptimistic은 어떻게 사용하는 거야? 예제 코드를 보여줘.
5. @terminal: 터미널 명령어 및 출력 결과 참조하기
    - terminal 창에서 Ctrl+K,L 입력시 자동으로 문맥에 추가됨
    - 예> @terminal 이 npm 설치 오류는 왜 발생하는 거고, 어떻게 해결해야 해?






