
"""
알고리즘 정석
    Topic2      : 재귀 함수.

    - python callstack 1000개 제한됨.
"""


"""
알고리즘 정석
    Topic3      : 알고리즘 패러다임.

Brute-Force : 가능한 모든 경우를 모두 대입해서 처리하는 방식 (무차별 처리 방식)
	- 직관적이고 명확, 답을 학실하게 찾을 수 있다.
	
Divide and Conquer : 분할 정복 (재귀 개념 필요)
	- 큰 문제를 잘게 나누어 부분적 으로 구현후 부분 솔루션을 합쳐 처리.
  	  (Divide > Conquer(DnC 다시 진행) > Combine)

Dynamic Programming
	- 최적 부분 구조, 중복 부분 문제(Overlapping Subproblems)
	- 부분 문제의 최적의 답을 기반으로 현재 문제를 풀수 있는 구조 (재귀)
	- 한번 계산한 문제는 기억하여, 재 사용한다.
	[방식]
	1. memoization	: 재귀, 하향식 접근 (up-bottom방식:큰거에서 작은걸로) : 구한값을 메모하는 방식
					: 필요한 계산만 진행함.
	2. Tabulation	: 반복, 상향식 접근 (buttom-up방식:작은거에서 큰걸로) : 표를 채워나가는 방식
					: 모든 계산을 진행함.
"""


"""
알고리즘 정석
    Topic4      : 문제 해결 능력 기르기
    
- 간단하고 바르지만, 최적의 답을 보장하지는 않는다.
- 눈앞에 보이는 것만 처리하여, 문제를 해결한다.
- 최적의 답이 필요없을 떄, 최적의 답이 너무 느릴떄.
- 최적 부분 구조, 탐욕적 선택 속성(Greedy Choice Property)
	ex> 돈 거슬로 주기등


"""
